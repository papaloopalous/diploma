// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: task.proto

package taskpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskService_CreateTask_FullMethodName       = "/taskpb.TaskService/CreateTask"
	TaskService_GetTask_FullMethodName          = "/taskpb.TaskService/GetTask"
	TaskService_GetSolution_FullMethodName      = "/taskpb.TaskService/GetSolution"
	TaskService_LinkFileTask_FullMethodName     = "/taskpb.TaskService/LinkFileTask"
	TaskService_LinkFileSolution_FullMethodName = "/taskpb.TaskService/LinkFileSolution"
	TaskService_Grade_FullMethodName            = "/taskpb.TaskService/Grade"
	TaskService_Solve_FullMethodName            = "/taskpb.TaskService/Solve"
	TaskService_AvgGrade_FullMethodName         = "/taskpb.TaskService/AvgGrade"
	TaskService_AllTasks_FullMethodName         = "/taskpb.TaskService/AllTasks"
)

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskServiceClient interface {
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*TaskIDResponse, error)
	GetTask(ctx context.Context, in *TaskIDRequest, opts ...grpc.CallOption) (*FileResponse, error)
	GetSolution(ctx context.Context, in *TaskIDRequest, opts ...grpc.CallOption) (*FileResponse, error)
	LinkFileTask(ctx context.Context, in *LinkFileRequest, opts ...grpc.CallOption) (*Empty, error)
	LinkFileSolution(ctx context.Context, in *LinkFileRequest, opts ...grpc.CallOption) (*Empty, error)
	Grade(ctx context.Context, in *GradeRequest, opts ...grpc.CallOption) (*StudentIDResponse, error)
	Solve(ctx context.Context, in *TaskIDRequest, opts ...grpc.CallOption) (*Empty, error)
	AvgGrade(ctx context.Context, in *StudentIDRequest, opts ...grpc.CallOption) (*GradeResponse, error)
	AllTasks(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*TaskListResponse, error)
}

type taskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceClient(cc grpc.ClientConnInterface) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*TaskIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskIDResponse)
	err := c.cc.Invoke(ctx, TaskService_CreateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTask(ctx context.Context, in *TaskIDRequest, opts ...grpc.CallOption) (*FileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, TaskService_GetTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetSolution(ctx context.Context, in *TaskIDRequest, opts ...grpc.CallOption) (*FileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, TaskService_GetSolution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) LinkFileTask(ctx context.Context, in *LinkFileRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, TaskService_LinkFileTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) LinkFileSolution(ctx context.Context, in *LinkFileRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, TaskService_LinkFileSolution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) Grade(ctx context.Context, in *GradeRequest, opts ...grpc.CallOption) (*StudentIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StudentIDResponse)
	err := c.cc.Invoke(ctx, TaskService_Grade_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) Solve(ctx context.Context, in *TaskIDRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, TaskService_Solve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) AvgGrade(ctx context.Context, in *StudentIDRequest, opts ...grpc.CallOption) (*GradeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GradeResponse)
	err := c.cc.Invoke(ctx, TaskService_AvgGrade_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) AllTasks(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*TaskListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskListResponse)
	err := c.cc.Invoke(ctx, TaskService_AllTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
// All implementations must embed UnimplementedTaskServiceServer
// for forward compatibility.
type TaskServiceServer interface {
	CreateTask(context.Context, *CreateTaskRequest) (*TaskIDResponse, error)
	GetTask(context.Context, *TaskIDRequest) (*FileResponse, error)
	GetSolution(context.Context, *TaskIDRequest) (*FileResponse, error)
	LinkFileTask(context.Context, *LinkFileRequest) (*Empty, error)
	LinkFileSolution(context.Context, *LinkFileRequest) (*Empty, error)
	Grade(context.Context, *GradeRequest) (*StudentIDResponse, error)
	Solve(context.Context, *TaskIDRequest) (*Empty, error)
	AvgGrade(context.Context, *StudentIDRequest) (*GradeResponse, error)
	AllTasks(context.Context, *UserIDRequest) (*TaskListResponse, error)
	mustEmbedUnimplementedTaskServiceServer()
}

// UnimplementedTaskServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskServiceServer struct{}

func (UnimplementedTaskServiceServer) CreateTask(context.Context, *CreateTaskRequest) (*TaskIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedTaskServiceServer) GetTask(context.Context, *TaskIDRequest) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedTaskServiceServer) GetSolution(context.Context, *TaskIDRequest) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSolution not implemented")
}
func (UnimplementedTaskServiceServer) LinkFileTask(context.Context, *LinkFileRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkFileTask not implemented")
}
func (UnimplementedTaskServiceServer) LinkFileSolution(context.Context, *LinkFileRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkFileSolution not implemented")
}
func (UnimplementedTaskServiceServer) Grade(context.Context, *GradeRequest) (*StudentIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Grade not implemented")
}
func (UnimplementedTaskServiceServer) Solve(context.Context, *TaskIDRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Solve not implemented")
}
func (UnimplementedTaskServiceServer) AvgGrade(context.Context, *StudentIDRequest) (*GradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvgGrade not implemented")
}
func (UnimplementedTaskServiceServer) AllTasks(context.Context, *UserIDRequest) (*TaskListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllTasks not implemented")
}
func (UnimplementedTaskServiceServer) mustEmbedUnimplementedTaskServiceServer() {}
func (UnimplementedTaskServiceServer) testEmbeddedByValue()                     {}

// UnsafeTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServiceServer will
// result in compilation errors.
type UnsafeTaskServiceServer interface {
	mustEmbedUnimplementedTaskServiceServer()
}

func RegisterTaskServiceServer(s grpc.ServiceRegistrar, srv TaskServiceServer) {
	// If the following call pancis, it indicates UnimplementedTaskServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskService_ServiceDesc, srv)
}

func _TaskService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTask(ctx, req.(*TaskIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_GetSolution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetSolution(ctx, req.(*TaskIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_LinkFileTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).LinkFileTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_LinkFileTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).LinkFileTask(ctx, req.(*LinkFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_LinkFileSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).LinkFileSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_LinkFileSolution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).LinkFileSolution(ctx, req.(*LinkFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_Grade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).Grade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_Grade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).Grade(ctx, req.(*GradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_Solve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).Solve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_Solve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).Solve(ctx, req.(*TaskIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_AvgGrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).AvgGrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_AvgGrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).AvgGrade(ctx, req.(*StudentIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_AllTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).AllTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_AllTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).AllTasks(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskService_ServiceDesc is the grpc.ServiceDesc for TaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taskpb.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _TaskService_CreateTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _TaskService_GetTask_Handler,
		},
		{
			MethodName: "GetSolution",
			Handler:    _TaskService_GetSolution_Handler,
		},
		{
			MethodName: "LinkFileTask",
			Handler:    _TaskService_LinkFileTask_Handler,
		},
		{
			MethodName: "LinkFileSolution",
			Handler:    _TaskService_LinkFileSolution_Handler,
		},
		{
			MethodName: "Grade",
			Handler:    _TaskService_Grade_Handler,
		},
		{
			MethodName: "Solve",
			Handler:    _TaskService_Solve_Handler,
		},
		{
			MethodName: "AvgGrade",
			Handler:    _TaskService_AvgGrade_Handler,
		},
		{
			MethodName: "AllTasks",
			Handler:    _TaskService_AllTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task.proto",
}
