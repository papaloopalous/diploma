// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: user.proto

package userpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_UserExists_FullMethodName             = "/user.UserService/UserExists"
	UserService_AddUser_FullMethodName                = "/user.UserService/AddUser"
	UserService_CheckCredentials_FullMethodName       = "/user.UserService/CheckCredentials"
	UserService_GetUserByID_FullMethodName            = "/user.UserService/GetUserByID"
	UserService_UpdateUserProfile_FullMethodName      = "/user.UserService/UpdateUserProfile"
	UserService_GetUserLinks_FullMethodName           = "/user.UserService/GetUserLinks"
	UserService_GetAvailableTeachers_FullMethodName   = "/user.UserService/GetAvailableTeachers"
	UserService_HasTeacher_FullMethodName             = "/user.UserService/HasTeacher"
	UserService_GetStudentTeacherLinks_FullMethodName = "/user.UserService/GetStudentTeacherLinks"
	UserService_UpdateRating_FullMethodName           = "/user.UserService/UpdateRating"
	UserService_GetRating_FullMethodName              = "/user.UserService/GetRating"
	UserService_AddRequestLink_FullMethodName         = "/user.UserService/AddRequestLink"
	UserService_AcceptRequest_FullMethodName          = "/user.UserService/AcceptRequest"
	UserService_DenyRequest_FullMethodName            = "/user.UserService/DenyRequest"
	UserService_GetRequests_FullMethodName            = "/user.UserService/GetRequests"
	UserService_GetUsersByIDs_FullMethodName          = "/user.UserService/GetUsersByIDs"
	UserService_GetStudentsByTeacher_FullMethodName   = "/user.UserService/GetStudentsByTeacher"
	UserService_GetTeachersByStudent_FullMethodName   = "/user.UserService/GetTeachersByStudent"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	UserExists(ctx context.Context, in *UsernameRequest, opts ...grpc.CallOption) (*UserExistsResponse, error)
	AddUser(ctx context.Context, in *NewUserRequest, opts ...grpc.CallOption) (*UserIDResponse, error)
	CheckCredentials(ctx context.Context, in *CredentialsRequest, opts ...grpc.CallOption) (*CredentialsResponse, error)
	GetUserByID(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*UserProfileResponse, error)
	UpdateUserProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*Empty, error)
	GetUserLinks(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*UserLinksResponse, error)
	GetAvailableTeachers(ctx context.Context, in *AvailableTeachersRequest, opts ...grpc.CallOption) (*UsersListResponse, error)
	HasTeacher(ctx context.Context, in *RelationRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	GetStudentTeacherLinks(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*StudentTeacherLinksResponse, error)
	UpdateRating(ctx context.Context, in *UpdateRatingRequest, opts ...grpc.CallOption) (*Empty, error)
	GetRating(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*RatingResponse, error)
	AddRequestLink(ctx context.Context, in *RelationRequest, opts ...grpc.CallOption) (*Empty, error)
	AcceptRequest(ctx context.Context, in *RelationRequest, opts ...grpc.CallOption) (*Empty, error)
	DenyRequest(ctx context.Context, in *RelationRequest, opts ...grpc.CallOption) (*Empty, error)
	GetRequests(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*UUIDListResponse, error)
	GetUsersByIDs(ctx context.Context, in *UUIDListRequest, opts ...grpc.CallOption) (*UsersListResponse, error)
	GetStudentsByTeacher(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*UsersListResponse, error)
	GetTeachersByStudent(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*UsersListResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) UserExists(ctx context.Context, in *UsernameRequest, opts ...grpc.CallOption) (*UserExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserExistsResponse)
	err := c.cc.Invoke(ctx, UserService_UserExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddUser(ctx context.Context, in *NewUserRequest, opts ...grpc.CallOption) (*UserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserIDResponse)
	err := c.cc.Invoke(ctx, UserService_AddUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CheckCredentials(ctx context.Context, in *CredentialsRequest, opts ...grpc.CallOption) (*CredentialsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CredentialsResponse)
	err := c.cc.Invoke(ctx, UserService_CheckCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByID(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*UserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserProfileResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserService_UpdateUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserLinks(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*UserLinksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserLinksResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserLinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAvailableTeachers(ctx context.Context, in *AvailableTeachersRequest, opts ...grpc.CallOption) (*UsersListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsersListResponse)
	err := c.cc.Invoke(ctx, UserService_GetAvailableTeachers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) HasTeacher(ctx context.Context, in *RelationRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, UserService_HasTeacher_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetStudentTeacherLinks(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*StudentTeacherLinksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StudentTeacherLinksResponse)
	err := c.cc.Invoke(ctx, UserService_GetStudentTeacherLinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateRating(ctx context.Context, in *UpdateRatingRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserService_UpdateRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetRating(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*RatingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RatingResponse)
	err := c.cc.Invoke(ctx, UserService_GetRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddRequestLink(ctx context.Context, in *RelationRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserService_AddRequestLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AcceptRequest(ctx context.Context, in *RelationRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserService_AcceptRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DenyRequest(ctx context.Context, in *RelationRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserService_DenyRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetRequests(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*UUIDListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UUIDListResponse)
	err := c.cc.Invoke(ctx, UserService_GetRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUsersByIDs(ctx context.Context, in *UUIDListRequest, opts ...grpc.CallOption) (*UsersListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsersListResponse)
	err := c.cc.Invoke(ctx, UserService_GetUsersByIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetStudentsByTeacher(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*UsersListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsersListResponse)
	err := c.cc.Invoke(ctx, UserService_GetStudentsByTeacher_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetTeachersByStudent(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*UsersListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsersListResponse)
	err := c.cc.Invoke(ctx, UserService_GetTeachersByStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	UserExists(context.Context, *UsernameRequest) (*UserExistsResponse, error)
	AddUser(context.Context, *NewUserRequest) (*UserIDResponse, error)
	CheckCredentials(context.Context, *CredentialsRequest) (*CredentialsResponse, error)
	GetUserByID(context.Context, *UserIDRequest) (*UserProfileResponse, error)
	UpdateUserProfile(context.Context, *UpdateProfileRequest) (*Empty, error)
	GetUserLinks(context.Context, *UserIDRequest) (*UserLinksResponse, error)
	GetAvailableTeachers(context.Context, *AvailableTeachersRequest) (*UsersListResponse, error)
	HasTeacher(context.Context, *RelationRequest) (*BoolResponse, error)
	GetStudentTeacherLinks(context.Context, *UserIDRequest) (*StudentTeacherLinksResponse, error)
	UpdateRating(context.Context, *UpdateRatingRequest) (*Empty, error)
	GetRating(context.Context, *UserIDRequest) (*RatingResponse, error)
	AddRequestLink(context.Context, *RelationRequest) (*Empty, error)
	AcceptRequest(context.Context, *RelationRequest) (*Empty, error)
	DenyRequest(context.Context, *RelationRequest) (*Empty, error)
	GetRequests(context.Context, *UserIDRequest) (*UUIDListResponse, error)
	GetUsersByIDs(context.Context, *UUIDListRequest) (*UsersListResponse, error)
	GetStudentsByTeacher(context.Context, *UserIDRequest) (*UsersListResponse, error)
	GetTeachersByStudent(context.Context, *UserIDRequest) (*UsersListResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) UserExists(context.Context, *UsernameRequest) (*UserExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserExists not implemented")
}
func (UnimplementedUserServiceServer) AddUser(context.Context, *NewUserRequest) (*UserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUserServiceServer) CheckCredentials(context.Context, *CredentialsRequest) (*CredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCredentials not implemented")
}
func (UnimplementedUserServiceServer) GetUserByID(context.Context, *UserIDRequest) (*UserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserProfile(context.Context, *UpdateProfileRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedUserServiceServer) GetUserLinks(context.Context, *UserIDRequest) (*UserLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLinks not implemented")
}
func (UnimplementedUserServiceServer) GetAvailableTeachers(context.Context, *AvailableTeachersRequest) (*UsersListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableTeachers not implemented")
}
func (UnimplementedUserServiceServer) HasTeacher(context.Context, *RelationRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasTeacher not implemented")
}
func (UnimplementedUserServiceServer) GetStudentTeacherLinks(context.Context, *UserIDRequest) (*StudentTeacherLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentTeacherLinks not implemented")
}
func (UnimplementedUserServiceServer) UpdateRating(context.Context, *UpdateRatingRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRating not implemented")
}
func (UnimplementedUserServiceServer) GetRating(context.Context, *UserIDRequest) (*RatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRating not implemented")
}
func (UnimplementedUserServiceServer) AddRequestLink(context.Context, *RelationRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRequestLink not implemented")
}
func (UnimplementedUserServiceServer) AcceptRequest(context.Context, *RelationRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptRequest not implemented")
}
func (UnimplementedUserServiceServer) DenyRequest(context.Context, *RelationRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenyRequest not implemented")
}
func (UnimplementedUserServiceServer) GetRequests(context.Context, *UserIDRequest) (*UUIDListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequests not implemented")
}
func (UnimplementedUserServiceServer) GetUsersByIDs(context.Context, *UUIDListRequest) (*UsersListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByIDs not implemented")
}
func (UnimplementedUserServiceServer) GetStudentsByTeacher(context.Context, *UserIDRequest) (*UsersListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentsByTeacher not implemented")
}
func (UnimplementedUserServiceServer) GetTeachersByStudent(context.Context, *UserIDRequest) (*UsersListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeachersByStudent not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_UserExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserExists(ctx, req.(*UsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUser(ctx, req.(*NewUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CheckCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CheckCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CheckCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CheckCredentials(ctx, req.(*CredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByID(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserLinks(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAvailableTeachers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailableTeachersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAvailableTeachers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAvailableTeachers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAvailableTeachers(ctx, req.(*AvailableTeachersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_HasTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).HasTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_HasTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).HasTeacher(ctx, req.(*RelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetStudentTeacherLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetStudentTeacherLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetStudentTeacherLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetStudentTeacherLinks(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateRating(ctx, req.(*UpdateRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetRating(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddRequestLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddRequestLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddRequestLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddRequestLink(ctx, req.(*RelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AcceptRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AcceptRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AcceptRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AcceptRequest(ctx, req.(*RelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DenyRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DenyRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DenyRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DenyRequest(ctx, req.(*RelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetRequests(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUsersByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUsersByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUsersByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUsersByIDs(ctx, req.(*UUIDListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetStudentsByTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetStudentsByTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetStudentsByTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetStudentsByTeacher(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetTeachersByStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetTeachersByStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetTeachersByStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetTeachersByStudent(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserExists",
			Handler:    _UserService_UserExists_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _UserService_AddUser_Handler,
		},
		{
			MethodName: "CheckCredentials",
			Handler:    _UserService_CheckCredentials_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _UserService_GetUserByID_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _UserService_UpdateUserProfile_Handler,
		},
		{
			MethodName: "GetUserLinks",
			Handler:    _UserService_GetUserLinks_Handler,
		},
		{
			MethodName: "GetAvailableTeachers",
			Handler:    _UserService_GetAvailableTeachers_Handler,
		},
		{
			MethodName: "HasTeacher",
			Handler:    _UserService_HasTeacher_Handler,
		},
		{
			MethodName: "GetStudentTeacherLinks",
			Handler:    _UserService_GetStudentTeacherLinks_Handler,
		},
		{
			MethodName: "UpdateRating",
			Handler:    _UserService_UpdateRating_Handler,
		},
		{
			MethodName: "GetRating",
			Handler:    _UserService_GetRating_Handler,
		},
		{
			MethodName: "AddRequestLink",
			Handler:    _UserService_AddRequestLink_Handler,
		},
		{
			MethodName: "AcceptRequest",
			Handler:    _UserService_AcceptRequest_Handler,
		},
		{
			MethodName: "DenyRequest",
			Handler:    _UserService_DenyRequest_Handler,
		},
		{
			MethodName: "GetRequests",
			Handler:    _UserService_GetRequests_Handler,
		},
		{
			MethodName: "GetUsersByIDs",
			Handler:    _UserService_GetUsersByIDs_Handler,
		},
		{
			MethodName: "GetStudentsByTeacher",
			Handler:    _UserService_GetStudentsByTeacher_Handler,
		},
		{
			MethodName: "GetTeachersByStudent",
			Handler:    _UserService_GetTeachersByStudent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
